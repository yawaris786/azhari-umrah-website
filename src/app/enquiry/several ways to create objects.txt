In JavaScript, there are several ways to create objects. Here are the most common methods:

	1. Object Literal Syntax
		The simplest way to create an object.

		const obj = { 
			key1: "value1", 
			key2: "value2" 
		};
		console.log(obj); // { key1: "value1", key2: "value2" }
		
		
	2. Using the new Object() Constructor
		Creates an empty object and then you add properties to it.

		const obj = new Object();
		obj.key1 = "value1";
		obj.key2 = "value2";
		console.log(obj); // { key1: "value1", key2: "value2" }
		
		
	3. Using a Constructor Function
		Define a function to act as a blueprint, then use new to create an object.

		function MyObject(key1, key2) {
			this.key1 = key1;
			this.key2 = key2;
		}

		const obj = new MyObject("value1", "value2");
		console.log(obj); // MyObject { key1: "value1", key2: "value2" }
		
		
	4. Using Object.create()
		Creates a new object with the specified prototype object.

		const prototypeObject = {
			greet() {
				console.log("Hello!");
			}
		};

		const obj = Object.create(prototypeObject);
		obj.key1 = "value1";
		console.log(obj.key1); // "value1"
		obj.greet(); // "Hello!"
		
		
	5. Using ES6 Classes
		Classes in JavaScript are syntactic sugar over the prototype-based inheritance.

		class MyObject {
			constructor(key1, key2) {
				this.key1 = key1;
				this.key2 = key2;
			}
		}

		const obj = new MyObject("value1", "value2");
		console.log(obj); // MyObject { key1: "value1", key2: "value2" }
		
		
	6. Using a Factory Function
		A function that returns a new object.

		function createObject(key1, key2) {
			return { key1, key2 };
		}

		const obj = createObject("value1", "value2");
		console.log(obj); // { key1: "value1", key2: "value2" }
		
		
	7. Using JSON
		Parse a JSON string to create an object.

		const jsonString = '{"key1": "value1", "key2": "value2"}';
		const obj = JSON.parse(jsonString);
		console.log(obj); // { key1: "value1", key2: "value2" }

		
		
	8. Using Object.assign()
		Creates a new object by copying properties from one or more source objects.

		const source1 = { key1: "value1" };
		const source2 = { key2: "value2" };

		const obj = Object.assign({}, source1, source2);
		console.log(obj); // { key1: "value1", key2: "value2" }


	9. Using Spread Operator (...)
		A modern and concise way to create objects by merging properties.

		const source1 = { key1: "value1" };
		const source2 = { key2: "value2" };

		const obj = { ...source1, ...source2 };
		console.log(obj); // { key1: "value1", key2: "value2" }